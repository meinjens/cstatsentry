"""Initial migration

Revision ID: 001
Revises:
Create Date: 2025-09-18 23:15:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '001'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Create users table
    op.create_table('users',
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('steam_id', sa.String(length=17), nullable=False),
        sa.Column('steam_name', sa.String(length=255), nullable=True),
        sa.Column('avatar_url', sa.String(), nullable=True),
        sa.Column('last_sync', sa.DateTime(), nullable=True),
        sa.Column('sync_enabled', sa.Boolean(), nullable=True),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
        sa.PrimaryKeyConstraint('user_id')
    )
    op.create_index(op.f('ix_users_user_id'), 'users', ['user_id'], unique=False)
    op.create_index(op.f('ix_users_steam_id'), 'users', ['steam_id'], unique=True)

    # Create players table
    op.create_table('players',
        sa.Column('steam_id', sa.String(length=17), nullable=False),
        sa.Column('current_name', sa.String(length=255), nullable=True),
        sa.Column('previous_names', postgresql.ARRAY(sa.String()), nullable=True),
        sa.Column('avatar_url', sa.String(), nullable=True),
        sa.Column('profile_url', sa.String(), nullable=True),
        sa.Column('account_created', sa.DateTime(), nullable=True),
        sa.Column('last_logoff', sa.DateTime(), nullable=True),
        sa.Column('profile_state', sa.Integer(), nullable=True),
        sa.Column('visibility_state', sa.Integer(), nullable=True),
        sa.Column('country_code', sa.String(length=3), nullable=True),
        sa.Column('cs2_hours', sa.Integer(), nullable=True),
        sa.Column('total_games_owned', sa.Integer(), nullable=True),
        sa.Column('profile_updated', sa.DateTime(), nullable=True),
        sa.Column('stats_updated', sa.DateTime(), nullable=True),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
        sa.PrimaryKeyConstraint('steam_id')
    )

    # Create matches table
    op.create_table('matches',
        sa.Column('match_id', sa.String(length=255), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('match_date', sa.DateTime(), nullable=False),
        sa.Column('map', sa.String(length=100), nullable=True),
        sa.Column('score_team1', sa.Integer(), nullable=True),
        sa.Column('score_team2', sa.Integer(), nullable=True),
        sa.Column('user_team', sa.Integer(), nullable=True),
        sa.Column('sharing_code', sa.String(length=255), nullable=True),
        sa.Column('leetify_match_id', sa.String(length=255), nullable=True),
        sa.Column('processed', sa.Boolean(), nullable=True),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
        sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
        sa.PrimaryKeyConstraint('match_id')
    )
    op.create_index(op.f('ix_matches_user_date'), 'matches', ['user_id', 'match_date'], unique=False)

    # Create player_bans table
    op.create_table('player_bans',
        sa.Column('steam_id', sa.String(length=17), nullable=False),
        sa.Column('community_banned', sa.Boolean(), nullable=True),
        sa.Column('vac_banned', sa.Boolean(), nullable=True),
        sa.Column('number_of_vac_bans', sa.Integer(), nullable=True),
        sa.Column('days_since_last_ban', sa.Integer(), nullable=True),
        sa.Column('number_of_game_bans', sa.Integer(), nullable=True),
        sa.Column('economy_ban', sa.String(length=20), nullable=True),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
        sa.ForeignKeyConstraint(['steam_id'], ['players.steam_id'], ),
        sa.PrimaryKeyConstraint('steam_id')
    )

    # Create player_analyses table
    op.create_table('player_analyses',
        sa.Column('analysis_id', sa.Integer(), nullable=False),
        sa.Column('steam_id', sa.String(length=17), nullable=False),
        sa.Column('analyzed_by', sa.Integer(), nullable=False),
        sa.Column('suspicion_score', sa.Integer(), nullable=True),
        sa.Column('flags', sa.JSON(), nullable=True),
        sa.Column('confidence_level', sa.DECIMAL(precision=3, scale=2), nullable=True),
        sa.Column('analysis_version', sa.String(length=10), nullable=True),
        sa.Column('notes', sa.String(), nullable=True),
        sa.Column('analyzed_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
        sa.ForeignKeyConstraint(['analyzed_by'], ['users.user_id'], ),
        sa.ForeignKeyConstraint(['steam_id'], ['players.steam_id'], ),
        sa.PrimaryKeyConstraint('analysis_id')
    )
    op.create_index(op.f('ix_player_analyses_analysis_id'), 'player_analyses', ['analysis_id'], unique=False)
    op.create_index(op.f('ix_analyses_score'), 'player_analyses', ['suspicion_score'], unique=False)

    # Create user_teammates table
    op.create_table('user_teammates',
        sa.Column('relation_id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('player_steam_id', sa.String(length=17), nullable=False),
        sa.Column('matches_together', sa.Integer(), nullable=True),
        sa.Column('first_seen', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
        sa.Column('last_seen', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
        sa.Column('relationship_type', sa.String(length=20), nullable=True),
        sa.ForeignKeyConstraint(['player_steam_id'], ['players.steam_id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
        sa.PrimaryKeyConstraint('relation_id'),
        sa.UniqueConstraint('user_id', 'player_steam_id', name='_user_player_uc')
    )
    op.create_index(op.f('ix_user_teammates_relation_id'), 'user_teammates', ['relation_id'], unique=False)
    op.create_index(op.f('ix_teammates_user'), 'user_teammates', ['user_id', 'last_seen'], unique=False)

    # Create match_players table
    op.create_table('match_players',
        sa.Column('match_id', sa.String(length=255), nullable=False),
        sa.Column('steam_id', sa.String(length=17), nullable=False),
        sa.Column('team', sa.Integer(), nullable=True),
        sa.Column('score', sa.Integer(), nullable=True),
        sa.Column('kills', sa.Integer(), nullable=True),
        sa.Column('deaths', sa.Integer(), nullable=True),
        sa.Column('assists', sa.Integer(), nullable=True),
        sa.Column('headshot_percentage', sa.DECIMAL(precision=5, scale=2), nullable=True),
        sa.ForeignKeyConstraint(['match_id'], ['matches.match_id'], ),
        sa.ForeignKeyConstraint(['steam_id'], ['players.steam_id'], ),
        sa.PrimaryKeyConstraint('match_id', 'steam_id')
    )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('match_players')
    op.drop_index(op.f('ix_teammates_user'), table_name='user_teammates')
    op.drop_index(op.f('ix_user_teammates_relation_id'), table_name='user_teammates')
    op.drop_table('user_teammates')
    op.drop_index(op.f('ix_analyses_score'), table_name='player_analyses')
    op.drop_index(op.f('ix_player_analyses_analysis_id'), table_name='player_analyses')
    op.drop_table('player_analyses')
    op.drop_table('player_bans')
    op.drop_index(op.f('ix_matches_user_date'), table_name='matches')
    op.drop_table('matches')
    op.drop_table('players')
    op.drop_index(op.f('ix_users_steam_id'), table_name='users')
    op.drop_index(op.f('ix_users_user_id'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###